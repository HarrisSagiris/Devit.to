<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Developer News - Devit.to</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary: #4F46E5;
            --primary-hover: #4338CA;
            --bg: #0F172A;
            --bg-card: #1E293B;
            --text: #F8FAFC;
            --text-muted: #94A3B8;
            --border: #334155;
            --shadow: 0 4px 12px rgba(0,0,0,0.3);
            --gradient: linear-gradient(135deg, #4F46E5, #4338CA);
            --upvote: #22C55E;
            --downvote: #EF4444;
            --bookmark: #EAB308;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: var(--bg);
            min-height: 100vh;
            font-family: 'Inter', sans-serif;
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem;
            background: var(--bg-card);
            border-radius: 1rem;
            margin-bottom: 2rem;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            background: var(--gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .search-bar {
            position: relative;
            width: 300px;
        }

        .search-bar input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            background: var(--bg);
            color: var(--text);
            font-size: 0.875rem;
        }

        .search-bar i {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
        }

        .news-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .news-card {
            background: var(--bg-card);
            border-radius: 1rem;
            overflow: hidden;
            transition: transform 0.2s;
        }

        .news-card:hover {
            transform: translateY(-4px);
        }

        .news-image {
            width: 100%;
            height: 160px;
            object-fit: cover;
        }

        .news-content {
            padding: 1.5rem;
        }

        .news-meta {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .source-icon {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }

        .news-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .news-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border);
        }

        .action-btn {
            background: transparent;
            border: none;
            color: var(--text-muted);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: all 0.2s;
        }

        .action-btn:hover {
            background: rgba(255,255,255,0.1);
        }

        .action-btn.upvoted {
            color: var(--upvote);
        }

        .action-btn.bookmarked {
            color: var(--bookmark);
        }

        @media (max-width: 768px) {
            .search-bar {
                display: none;
            }
            
            .news-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="header-left">
                <h1 class="logo">DevNews</h1>
                <div class="search-bar">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="Search developer news...">
                </div>
            </div>
            <div class="header-right">
                <button class="action-btn">
                    <i class="fas fa-filter"></i>
                    Filter
                </button>
            </div>
        </header>

        <div id="news-container" class="news-grid">
            <!-- News cards will be dynamically inserted here -->
        </div>
    </div>

    <script>
        let newsData = [];
        let userVotes = new Map();
        let userBookmarks = new Set();

        async function fetchNews() {
            try {
                const response = await fetch('/api/news');
                newsData = await response.json();
                renderNews();
            } catch (error) {
                console.error('Failed to fetch news:', error);
                showError();
            }
        }

        function renderNews() {
            const container = document.getElementById('news-container');
            container.innerHTML = newsData.map(article => `
                <article class="news-card">
                    <img src="${article.image}" alt="${article.title}" class="news-image">
                    <div class="news-content">
                        <div class="news-meta">
                            <img src="${article.sourceIcon}" class="source-icon" alt="${article.source}">
                            <span>${article.source}</span>
                            <span>â€¢</span>
                            <span>${formatDate(article.date)}</span>
                        </div>
                        <h2 class="news-title">${article.title}</h2>
                        <div class="news-actions">
                            <button class="action-btn ${userVotes.get(article.id) ? 'upvoted' : ''}" 
                                    onclick="handleVote('${article.id}')">
                                <i class="fas fa-arrow-up"></i>
                                <span>${article.votes || 0}</span>
                            </button>
                            <button class="action-btn ${userBookmarks.has(article.id) ? 'bookmarked' : ''}"
                                    onclick="handleBookmark('${article.id}')">
                                <i class="fas fa-bookmark"></i>
                            </button>
                            <button class="action-btn" onclick="handleShare('${article.id}')">
                                <i class="fas fa-share"></i>
                            </button>
                        </div>
                    </div>
                </article>
            `).join('');
        }

        async function handleVote(articleId) {
            try {
                const response = await fetch(`/api/vote/${articleId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    userVotes.set(articleId, !userVotes.get(articleId));
                    const article = newsData.find(a => a.id === articleId);
                    article.votes = (article.votes || 0) + (userVotes.get(articleId) ? 1 : -1);
                    renderNews();
                }
            } catch (error) {
                console.error('Failed to vote:', error);
            }
        }

        async function handleBookmark(articleId) {
            try {
                const response = await fetch(`/api/bookmark/${articleId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    if (userBookmarks.has(articleId)) {
                        userBookmarks.delete(articleId);
                    } else {
                        userBookmarks.add(articleId);
                    }
                    renderNews();
                }
            } catch (error) {
                console.error('Failed to bookmark:', error);
            }
        }

        function handleShare(articleId) {
            const article = newsData.find(a => a.id === articleId);
            if (navigator.share) {
                navigator.share({
                    title: article.title,
                    url: article.url
                });
            } else {
                navigator.clipboard.writeText(article.url);
                alert('Link copied to clipboard!');
            }
        }

        function formatDate(date) {
            return new Intl.RelativeTimeFormat('en', { numeric: 'auto' })
                .format(-Math.round((Date.now() - new Date(date)) / 86400000), 'day');
        }

        function showError() {
            document.getElementById('news-container').innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <i class="fas fa-exclamation-circle" style="font-size: 2rem; color: var(--downvote);"></i>
                    <p style="margin-top: 1rem;">Failed to load news. Please try again later.</p>
                </div>
            `;
        }

        // Initialize
        fetchNews();

        // Refresh news every 5 minutes
        setInterval(fetchNews, 300000);
    </script>
</body>
</html>
