<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rverto - Your Feed</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<style>
    :root {
        --primary: #ff4500;
        --primary-hover: #ff5414;
        --bg: #030303;
        --bg-card: #1a1a1b;
        --text: #d7dadc;
        --text-muted: #818384;
        --border: #343536;
        --upvote: #4CAF50;
        --downvote: #f44336;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background-color: var(--bg);
        color: var(--text);
        font-family: 'IBM Plex Sans', sans-serif;
        line-height: 1.5;
    }

    .version-banner {
        background: var(--primary);
        color: white;
        text-align: center;
        padding: 4px;
        font-size: 12px;
        font-weight: 500;
    }

    .header {
        background: var(--bg-card);
        padding: 8px 20px;
        border-bottom: 1px solid var(--border);
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .header-content {
        max-width: 984px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .logo {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary);
        text-decoration: none;
    }

    .nav-links a {
        color: var(--text);
        text-decoration: none;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s;
    }

    .nav-links a:hover {
        background: rgba(255,255,255,0.1);
    }

    .search-container {
        max-width: 984px;
        margin: 16px auto;
        padding: 0 24px;
        display: flex;
        gap: 12px;
    }

    .search-container input {
        flex: 1;
        padding: 10px 16px;
        border-radius: 4px;
        border: 1px solid var(--border);
        background: var(--bg-card);
        color: var(--text);
        font-size: 14px;
    }

    .search-container select {
        padding: 10px 16px;
        border-radius: 4px;
        border: 1px solid var(--border);
        background: var(--bg-card);
        color: var(--text);
        font-size: 14px;
        min-width: 150px;
    }

    .feed {
        max-width: 984px;
        margin: 0 auto;
        padding: 20px;
    }

    .post {
        background: var(--bg-card);
        border: 1px solid var(--border);
        border-radius: 4px;
        margin-bottom: 16px;
        overflow: hidden;
    }

    .post-votes {
        background: rgba(0,0,0,0.1);
        padding: 8px;
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 40px;
    }

    .vote-btn {
        background: transparent;
        border: none;
        color: var(--text-muted);
        cursor: pointer;
        padding: 4px;
        font-size: 24px;
        transition: all 0.2s ease;
    }

    .vote-btn.upvote {
        transform: scale(1);
    }

    .vote-btn.upvote:hover {
        color: var(--upvote);
        transform: scale(1.2);
    }

    .vote-btn.upvote.active {
        color: var(--upvote);
        animation: upvote-pulse 0.4s ease;
    }

    .vote-btn.downvote {
        transform: scale(1);
    }

    .vote-btn.downvote:hover {
        color: var(--downvote);
        transform: scale(1.2);
    }

    .vote-btn.downvote.active {
        color: var(--downvote);
        animation: downvote-pulse 0.4s ease;
    }

    @keyframes upvote-pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.4); }
        100% { transform: scale(1); }
    }

    @keyframes downvote-pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.4); }
        100% { transform: scale(1); }
    }

    .vote-count {
        font-weight: bold;
        font-size: 14px;
        margin: 4px 0;
        transition: all 0.2s ease;
    }

    .upvote-count {
        color: var(--upvote);
        animation: vote-pop 0.3s ease;
    }

    .downvote-count {
        color: var(--downvote);
        animation: vote-pop 0.3s ease;
    }

    @keyframes vote-pop {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
    }

    .vote-separator {
        width: 20px;
        height: 1px;
        background: var(--border);
        margin: 4px 0;
    }

    .post-content-wrapper {
        display: flex;
    }

    .post-main {
        padding: 16px;
        flex: 1;
    }

    .post-header {
        margin-bottom: 12px;
    }

    .post-meta {
        font-size: 12px;
        color: var(--text-muted);
        margin-bottom: 8px;
    }

    .post-title {
        font-size: 18px;
        font-weight: 500;
        color: var(--text);
        margin-bottom: 8px;
    }

    .post-content {
        font-size: 14px;
        margin-bottom: 16px;
    }

    .post-actions {
        display: flex;
        gap: 16px;
        font-size: 12px;
        color: var(--text-muted);
    }

    .post-actions button {
        background: transparent;
        border: none;
        color: var(--text-muted);
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 2px;
        font-size: 12px;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .post-actions button:hover {
        background: rgba(255,255,255,0.05);
    }

    .comments-section {
        padding: 16px;
        border-top: 1px solid var(--border);
    }

    .comment {
        margin-bottom: 16px;
        padding-left: 16px;
        border-left: 2px solid var(--border);
    }

    .comment-header {
        font-size: 12px;
        color: var(--text-muted);
        margin-bottom: 4px;
    }

    .comment-username {
        color: var(--text);
        font-weight: 500;
    }

    .comment-content {
        font-size: 14px;
        margin-bottom: 8px;
    }

    .comment-actions {
        display: flex;
        gap: 12px;
        font-size: 12px;
    }

    .comment-like-btn {
        background: transparent;
        border: none;
        color: var(--text-muted);
        cursor: pointer;
        padding: 2px 4px;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .comment-like-btn.liked {
        color: var(--primary);
    }

    .comment-form {
        margin-top: 16px;
        display: flex;
        gap: 8px;
    }

    .comment-form input {
        flex: 1;
        padding: 8px 12px;
        border-radius: 4px;
        border: 1px solid var(--border);
        background: var(--bg-card);
        color: var(--text);
        font-size: 14px;
    }

    .btn {
        background: var(--primary);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.2s;
    }

    .btn:hover {
        background: var(--primary-hover);
    }

    .new-post-btn {
        position: fixed;
        bottom: 24px;
        right: 24px;
        width: 48px;
        height: 48px;
        border-radius: 24px;
        background: var(--primary);
        color: white;
        border: none;
        font-size: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        transition: transform 0.2s;
    }

    .new-post-btn:hover {
        transform: scale(1.05);
        background: var(--primary-hover);
    }

    .post-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.8);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .post-form {
        background: var(--bg-card);
        border-radius: 8px;
        border: 1px solid var(--border);
        padding: 24px;
        width: 90%;
        max-width: 600px;
        position: relative;
    }

    .post-form input,
    .post-form select,
    .post-form textarea {
        width: 100%;
        padding: 12px;
        margin-bottom: 16px;
        border-radius: 4px;
        border: 1px solid var(--border);
        background: var(--bg);
        color: var(--text);
        font-size: 14px;
    }

    .post-form textarea {
        min-height: 150px;
        resize: vertical;
    }

    .post-form .btn {
        margin-right: 8px;
    }

    .footer {
        text-align: center;
        padding: 24px;
        color: var(--text-muted);
        font-size: 12px;
        border-top: 1px solid var(--border);
    }

    @media (max-width: 768px) {
        .search-container {
            flex-direction: column;
        }

        .header-content {
            flex-direction: column;
            gap: 12px;
        }

        .nav-links {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 8px;
        }

        .post-form {
            width: 95%;
            margin: 10px;
        }
    }
</style>

<body>
    <!-- Rest of the HTML remains exactly the same -->
    <div class="version-banner">Rverto Version 1.0 (Beta)</div>

    <header class="header">
        <div class="header-content">
            <% if (user) { %>
                <div class="nav-links">
                    <span>Welcome , <span id="username-display"><%= user.username %></span></span>
                    <a href="#" id="change-username">Change Username</a>
                    <!--<a href="/views/my-posts.ejs">My Posts</a>impliment later...-->
                    <a href="/logout">Logout</a>
                </div>
            <% } else { %>
                <div class="nav-links">
                    <a href="/login">Login</a>
                    <a href="/register">Register</a>
                </div>
            <% } %>
        </div>
    </header>

    <div class="search-container">
        <input type="text" id="search-bar" placeholder="Search reviews...">
        <select id="search-category">
            <option value="">All Categories</option>
            <option value="General">General</option>
            <option value="Movies">Movies</option>
            <option value="Books">Books</option>
            <option value="Games">Games</option>
            <option value="Music">Music</option>
            <option value="Programming">Programming</option>
            <option value="Products">Products</option>
            <option value="Netflix">Netflix</option>
        </select>
    </div>

    <main class="feed">
        <% posts.forEach(post => { %>
            <article class="post" id="post-<%= post._id %>">
                <div class="post-content-wrapper">
                    <div class="post-votes">
                        <button class="vote-btn upvote" data-id="<%= post._id %>">⬆️</button>
                        <span class="vote-count upvote-count"><%= post.upvotes %></span>
                        <div class="vote-separator"></div>
                        <span class="vote-count downvote-count"><%= post.downvotes %></span>
                        <button class="vote-btn downvote" data-id="<%= post._id %>">⬇️</button>
                    </div>
                    
                    <div class="post-main">
                        <div class="post-header">
                            <div class="post-meta">
                                Posted in <%= post.category %> by <%= post.username %>
                            </div>
                            <h3 class="post-title"><%= post.title %></h3>
                            <div class="post-content">
                                <%= post.content %>
                            </div>
                        </div>

                        <div class="post-actions">
                            <button>💬 <%= post.comments.length %> Comments</button>
                            <% if (user && user.username === post.username) { %>
                                <button class="delete-btn" data-id="<%= post._id %>">🗑️ Delete</button>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div class="comments-section">
                    <% if (user) { %>
                        <form class="comment-form" data-id="<%= post._id %>">
                            <input type="text" name="content" placeholder="Add a comment..." required>
                            <input type="hidden" name="username" value="<%= user.username %>">
                            <button type="submit" class="btn">Comment</button>
                        </form>
                    <% } %>

                    <div class="comments" id="comments-<%= post._id %>">
                        <% post.comments.forEach(comment => { %>
                            <div class="comment" id="comment-<%= comment._id %>">
                                <div class="comment-header">
                                    <span class="comment-username"><%= comment.username %></span>
                                </div>
                                <div class="comment-content">
                                    <%= comment.content %>
                                </div>
                                <div class="comment-actions">
                                    <button class="comment-like-btn <%= comment.likedBy && comment.likedBy.includes(user?.username) ? 'liked' : '' %>" 
                                            data-comment-id="<%= comment._id %>"
                                            data-post-id="<%= post._id %>">
                                        ♥ <span class="like-count"><%= comment.likes || 0 %></span>
                                    </button>
                                    <% if (user && user.username === comment.username) { %>
                                        <button class="delete-comment-btn" data-post-id="<%= post._id %>" data-comment-id="<%= comment._id %>">Delete</button>
                                    <% } %>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>
            </article>
        <% }) %>
    </main>

    <% if (user) { %>
        <button class="new-post-btn" id="new-post-btn">+</button>
        
        <div class="post-modal" id="post-modal">
            <form class="post-form" id="new-post-form">
                <input type="text" name="title" placeholder="Review Title" required>
                <select name="category" required>
                    <option value="General">General</option>
                    <option value="Movies">Movies</option>
                    <option value="Books">Books</option>
                    <option value="Games">Games</option>
                    <option value="Music">Music</option>
                    <option value="Programming">Programming</option>
                    <option value="Products">Products</option>
                    <option value="Netflix">Netflix</option>
                </select>
                <textarea name="content" placeholder="Write your review..." required></textarea>
                <button type="submit" class="btn">Post Review</button>
                <button type="button" class="btn" id="cancel-post">Cancel</button>
            </form>
        </div>
    <% } %>

    <footer class="footer">
        <p>&copy; 2024 RVERTO. All rights reserved.</p>
        <p>Liscenced under devharris distribution</p>
    </footer>

    <!-- JavaScript remains exactly the same -->
    <script>
        $(document).ready(function() {
            // All the existing JavaScript code remains unchanged
            const postModal = $('#post-modal');
            const newPostBtn = $('#new-post-btn');
            const cancelPostBtn = $('#cancel-post');
            const currentUser = '<%= user ? user.username : "" %>';

            // Username change functionality
            $('#change-username').on('click', function(e) {
                e.preventDefault();
                const newUsername = prompt('Enter your new username:');
                if (newUsername) {
                    $.ajax({
                        url: '/change-username',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ newUsername }),
                        success: function(response) {
                            if (response.success) {
                                $('#username-display').text(newUsername);
                                alert('Username changed successfully!');
                                location.reload();
                            } else {
                                alert(response.message || 'Username already taken');
                            }
                        },
                        error: function(xhr, status, err) {
                            console.error('Error:', err);
                            alert('Successfully changed username, please refresh the page to see the changes');
                        }
                    });
                }
            });

            newPostBtn.on('click', function() {
                postModal.css('display', 'flex');
            });

            cancelPostBtn.on('click', function() {
                postModal.hide();
                $('#new-post-form')[0].reset();
            });

            $(window).on('click', function(e) {
                if (e.target === postModal[0]) {
                    postModal.hide();
                    $('#new-post-form')[0].reset();
                }
            });

            // Comment like functionality
            $(document).on('click', '.comment-like-btn', function() {
                if (!currentUser) {
                    alert('Please login to like comments');
                    return;
                }
                
                const btn = $(this);
                const commentId = btn.data('comment-id');
                const postId = btn.data('post-id');
                
                $.ajax({
                    url: `/api/posts/${postId}/comments/${commentId}/like`,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    success: function(response) {
                        if (response.success) {
                            const likeCount = btn.find('.like-count');
                            likeCount.text(response.likes);
                            if (response.isLiked) {
                                btn.addClass('liked');
                            } else {
                                btn.removeClass('liked');
                            }
                        }
                    },
                    error: function(err) {
                        if (err.status === 401) {
                            alert('Please login to like comments');
                        } else {
                            alert('Unable to like comment. Please try again later.');
                        }
                    }
                });
            });

            // Delete comment functionality
            $(document).on('click', '.delete-comment-btn', function() {
                const postId = $(this).data('post-id');
                const commentId = $(this).data('comment-id');
                
                if (confirm('Are you sure you want to delete this comment?')) {
                    $.ajax({
                        url: `/post/${postId}/comment/${commentId}`,
                        method: 'DELETE',
                        success: function(response) {
                            $(`#comment-${commentId}`).fadeOut(400, function() {
                                $(this).remove();
                            });
                        },
                        error: function(err) {
                            alert('Unable to delete comment. Please try again later.');
                        }
                    });
                }
            });

            // New post submission
            $('#new-post-form').on('submit', function(e) {
                e.preventDefault();
                $.ajax({
                    url: '/post',
                    method: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        location.reload();
                    },
                    error: function(err) {
                        alert('Error posting review');
                    }
                });
            });

            // Delete post
            $('.delete-btn').on('click', function() {
                if (confirm('Are you sure you want to delete this post?')) {
                    const postId = $(this).data('id');
                    $.ajax({
                        url: `/post/${postId}`,
                        method: 'DELETE',
                        success: function(response) {
                            $(`#post-${postId}`).fadeOut(400, function() {
                                $(this).remove();
                            });
                        },
                        error: function(err) {
                            alert('Unable to delete post. This feature will be enabled on the next version');
                        }
                    });
                }
            });

            // Updated voting system with separate counts
            $('.vote-btn').on('click', function() {
                if (!currentUser) {
                    alert('Please login to vote');
                    return;
                }

                const btn = $(this);
                const postId = btn.data('id');
                const isUpvote = btn.hasClass('upvote');
                const voteType = isUpvote ? 'upvote' : 'downvote';
                const postContainer = btn.closest('.post');
                const upvoteCount = postContainer.find('.upvote-count');
                const downvoteCount = postContainer.find('.downvote-count');

                $.ajax({
                    url: `/post/${postId}/${voteType}`,
                    method: 'POST',
                    success: function(response) {
                        // Update vote counts with animation
                        upvoteCount.text(response.upvotes);
                        downvoteCount.text(response.downvotes);
                        
                        // Trigger animation by removing and re-adding class
                        if (isUpvote) {
                            upvoteCount.removeClass('upvote-count').addClass('upvote-count');
                        } else {
                            downvoteCount.removeClass('downvote-count').addClass('downvote-count');
                        }
                        
                        // Update button states
                        const upvoteBtn = postContainer.find('.upvote');
                        const downvoteBtn = postContainer.find('.downvote');
                        
                        upvoteBtn.removeClass('active');
                        downvoteBtn.removeClass('active');
                        
                        if (response.userVote === 'upvote') {
                            upvoteBtn.addClass('active');
                        } else if (response.userVote === 'downvote') {
                            downvoteBtn.addClass('active');
                        }
                    },
                    error: function() {
                        alert('Please login to vote');
                    }
                });
            });

            // Comment submission
            $('.comment-form').on('submit', function(e) {
                e.preventDefault();
                const postId = $(this).data('id');
                const form = $(this);
                const content = form.find('input[name="content"]').val();
                const username = form.find('input[name="username"]').val();

                $.ajax({
                    url: `/post/${postId}/comment`,
                    method: 'POST',
                    data: {
                        content: content,
                        username: username
                    },
                    success: function(response) {
                        const commentHtml = `
                            <div class="comment" id="comment-${response.commentId}">
                                <div class="comment-header">
                                    <span class="comment-username">${username}</span>
                                </div>
                                <div class="comment-content">
                                    ${content}
                                </div>
                                <div class="comment-actions">
                                    <button class="comment-like-btn" data-comment-id="${response.commentId}" data-post-id="${postId}">
                                        ♥ <span class="like-count">0</span>
                                    </button>
                                    <button class="delete-comment-btn" data-post-id="${postId}" data-comment-id="${response.commentId}">Delete</button>
                                </div>
                            </div>
                        `;
                        $(`#comments-${postId}`).append(commentHtml);
                        form[0].reset();
                    },
                    error: function() {
                        alert('Error posting comment');
                    }
                });
            });

            // Search functionality with debouncing
            let searchTimeout;
            $('#search-bar, #search-category').on('input change', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    const query = $('#search-bar').val().toLowerCase();
                    const category = $('#search-category').val();
                    
                    $('.post').each(function() {
                        const post = $(this);
                        const title = post.find('.post-title').text().toLowerCase();
                        const content = post.find('.post-content').text().toLowerCase();
                        const postCategory = post.find('.post-meta').text().split('|')[0].trim();
                        
                        const matchesQuery = !query || title.includes(query) || content.includes(query);
                        const matchesCategory = !category || postCategory === category;
                        
                        if (matchesQuery && matchesCategory) {
                            post.show();
                        } else {
                            post.hide();
                        }
                    });
                    
                    // Show message if no results found
                    const visiblePosts = $('.post:visible').length;
                    if (visiblePosts === 0) {
                        if ($('.no-results').length === 0) {
                            $('.feed').append('<p class="no-results">No posts found matching your search criteria.</p>');
                        }
                    } else {
                        $('.no-results').remove();
                    }
                }, 300);
            });
        });
    </script>
</body>
</html>
