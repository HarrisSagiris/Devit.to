<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Devit.to">
    <!-- SEO Meta Tags -->
    <meta name="description" content="Devit.to - A developer platform for sharing knowledge, connecting with other developers, and staying up to date with the latest in tech. Join our community to discuss programming, tech news, and more.">
    <meta name="keywords" content="developer platform, programming, coding, tech news, developer community, javascript, python, web development, software engineering">
    <meta name="author" content="Devit.to">
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="Devit.to - Your Developer Community">
    <meta property="og:description" content="Join Devit.to to connect with developers, share knowledge, and stay updated with the latest in tech.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://devit.to">
    <meta property="og:image" content="/icons/devit.jpg">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Devit.to - Your Developer Community">
    <meta name="twitter:description" content="Join Devit.to to connect with developers, share knowledge, and stay updated with the latest in tech.">
    <meta name="twitter:image" content="/icons/devit.jpg">
    
    <!-- Canonical URL -->
    <link rel="canonical" href="https://devit.to">
    <title>Devit.to - Your Feed</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 2L2 7L12 12L22 7L12 2Z' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3Cpath d='M2 17L12 22L22 17' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3Cpath d='M2 12L12 17L22 12' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E">
    
    <!-- iOS icons -->
    <link rel="apple-touch-icon" href="/icons/devit.jpg">
    <link rel="apple-touch-icon" sizes="152x152" href="/icons/devit.jpg">
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/devit.jpg">
    <link rel="apple-touch-icon" sizes="167x167" href="/icons/devit.jpg">
    
    <!-- iOS splash screens -->
    <link rel="apple-touch-startup-image" href="/splash/iphone5.png" media="(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/splash/iphone6.png" media="(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/splash/iphoneplus.png" media="(device-width: 621px) and (device-height: 1104px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/splash/iphonex.png" media="(device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/splash/iphonexr.png" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/splash/iphonexsmax.png" media="(device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3)">
    <link rel="apple-touch-startup-image" href="/splash/ipad.png" media="(device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/splash/ipadpro1.png" media="(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/splash/ipadpro2.png" media="(device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2)">
    <link rel="apple-touch-startup-image" href="/splash/ipadpro3.png" media="(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)">

    <link rel="stylesheet" href="/css/style.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<style>
    /* Stack Overflow inspired styles */
    :root {
        --so-orange: #f48024;
        --so-blue: #0077cc;
        --so-gray: #242729;
        --so-light-gray: #f8f9f9;
        --so-border: #e4e6e8;
        --so-text: #242729;
        --so-text-muted: #6a737c;
        --so-link: #0077cc;
        --so-link-hover: #0095ff;
        --so-success: #48a868;
        --so-warning: #f1b600;
        --so-error: #d1383d;
    }

    /* Base styles */
    body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
        line-height: 1.5;
        color: var(--so-text);
        background: #fff;
        margin: 0;
        padding-top: 50px;
    }

    /* Header */
    .top-bar {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 50px;
        background: #fff;
        border-top: 3px solid var(--so-orange);
        border-bottom: 1px solid var(--so-border);
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        z-index: 1000;
        display: flex;
        align-items: center;
        padding: 0 16px;
    }

    .logo {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 20px;
        font-weight: bold;
        color: var(--so-gray);
        text-decoration: none;
    }

    .search-container {
        flex: 1;
        max-width: 800px;
        margin: 0 16px;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 8px 32px 8px 12px;
        border: 1px solid var(--so-border);
        border-radius: 3px;
        font-size: 14px;
    }

    .search-icon {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--so-text-muted);
    }

    /* Main content */
    .container {
        max-width: 1264px;
        margin: 24px auto;
        padding: 0 24px;
        display: grid;
        grid-template-columns: 164px 1fr 300px;
        gap: 24px;
    }

    /* Left sidebar */
    .left-sidebar {
        position: sticky;
        top: 74px;
    }

    .nav-links {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .nav-item {
        padding: 8px 0;
    }

    .nav-link {
        color: var(--so-text);
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 12px;
        border-radius: 3px;
    }

    .nav-link:hover {
        background: var(--so-light-gray);
    }

    .nav-link.active {
        background: var(--so-light-gray);
        font-weight: bold;
        color: var(--so-gray);
    }

    /* Main feed */
    .main-content {
        border: 1px solid var(--so-border);
        border-radius: 3px;
        background: #fff;
    }

    .post {
        padding: 16px;
        border-bottom: 1px solid var(--so-border);
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 16px;
    }

    .post:last-child {
        border-bottom: none;
    }

    .vote-cell {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        min-width: 40px;
    }

    .vote-count {
        font-size: 20px;
        color: var(--so-text);
        font-weight: 500;
    }

    .post-content {
        overflow: hidden;
    }

    .post-title {
        font-size: 17px;
        margin: 0 0 8px;
    }

    .post-title a {
        color: var(--so-link);
        text-decoration: none;
    }

    .post-title a:hover {
        color: var(--so-link-hover);
    }

    .post-excerpt {
        font-size: 13px;
        color: var(--so-text);
        margin-bottom: 12px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .post-meta {
        display: flex;
        align-items: center;
        gap: 16px;
        font-size: 12px;
        color: var(--so-text-muted);
    }

    .tag {
        display: inline-block;
        padding: 4px 6px;
        background: #e1ecf4;
        color: var(--so-link);
        border-radius: 3px;
        font-size: 12px;
        text-decoration: none;
    }

    .tag:hover {
        background: #d0e3f1;
        color: var(--so-link-hover);
    }

    /* Right sidebar */
    .right-sidebar {
        position: sticky;
        top: 74px;
    }

    .widget {
        background: #fdf7e3;
        border: 1px solid #e6dbb7;
        border-radius: 3px;
        padding: 16px;
        margin-bottom: 16px;
    }

    .widget-title {
        font-size: 13px;
        font-weight: bold;
        margin: 0 0 12px;
    }

    .widget-content {
        font-size: 13px;
        color: var(--so-text);
    }

    /* Mobile styles */
    @media (max-width: 980px) {
        .container {
            grid-template-columns: 1fr;
        }

        .left-sidebar,
        .right-sidebar {
            display: none;
        }
    }

    @media (max-width: 640px) {
        .top-bar {
            padding: 0 8px;
        }

        .search-container {
            margin: 0 8px;
        }

        .container {
            padding: 0 8px;
            margin: 16px auto;
        }

        .post {
            padding: 12px;
        }
    }

    /* iOS home screen styles */
    @media (display-mode: standalone) {
        body {
            padding-top: calc(50px + env(safe-area-inset-top));
            padding-bottom: env(safe-area-inset-bottom);
        }

        .top-bar {
            padding-top: env(safe-area-inset-top);
            height: calc(50px + env(safe-area-inset-top));
        }
    }

    /* Dark mode support */
    @media (prefers-color-scheme: dark) {
        :root {
            --so-gray: #ffffff;
            --so-light-gray: #2d2d2d;
            --so-border: #404345;
            --so-text: #ffffff;
            --so-text-muted: #9fa6ad;
            --so-link: #378ad3;
            --so-link-hover: #4ca4ff;
        }

        body {
            background: #1c1c1c;
        }

        .top-bar {
            background: #2d2d2d;
        }

        .main-content {
            background: #2d2d2d;
        }

        .widget {
            background: #2d2d2d;
            border-color: #404345;
        }
    }
</style>
<body>
      <div class="version-banner">🚀 Welcome to Devit.to - The developer platform!</div>
    
    <div class="github-banner">
        🌟 Love Devit.to? Help us make it better! Check out our <a href="https://github.com/HarrisSagiris/Devit.to" target="_blank">GitHub repository</a> and contribute to the project. Every contribution counts! 
    </div>

    <header class="header">
        <div class="header-content">
            <a href="/" class="logo">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                Devit.to
            </a>
            <% if (user) { %>
                <div class="nav-links">
                    <div class="profile-dropdown" style="position: relative;">
                        <div class="profile-trigger" onclick="toggleDropdown(this)" style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer; padding: 0.5rem; border-radius: 0.5rem; transition: background 0.2s;">
                            <img src="<%= user.avatar || '/icons/icon.jpg' %>" alt="Profile" class="profile-avatar" style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover;">
                            <i class="fas fa-chevron-down" style="font-size: 0.75rem; color: var(--text-muted); transition: transform 0.2s;"></i>
                        </div>
                        <div class="dropdown-content" style="position: absolute; top: 100%; right: 0; min-width: 220px; background: var(--bg-card); border-radius: 0.75rem; box-shadow: var(--shadow); margin-top: 0.5rem; z-index: 100; overflow: hidden; opacity: 0; visibility: hidden; transform: translateY(-10px); transition: all 0.2s;">
                            <div class="dropdown-header" style="padding: 1rem; background: var(--bg-card-hover);">
                                <span style="display: block; margin-bottom: 0.5rem; color: var(--text);">Welcome, <strong><%= user.username %></strong></span>
                                <% 
                                // Calculate user rank based on total upvotes
                                let rank;
                                let badgeClass;
                                let icon;
                                
                                if (user.totalUpvotes >= 5000) {
                                    rank = "Elite";
                                    badgeClass = "gold"; 
                                    icon = "fa-crown";
                                } else if (user.totalUpvotes >= 2500) {
                                    rank = "Master";
                                    badgeClass = "gold";
                                    icon = "fa-star";
                                } else if (user.totalUpvotes >= 1000) {
                                    rank = "Expert"; 
                                    badgeClass = "silver";
                                    icon = "fa-medal";
                                } else if (user.totalUpvotes >= 500) {
                                    rank = "Advanced";
                                    badgeClass = "silver";
                                    icon = "fa-award";
                                } else if (user.totalUpvotes >= 100) {
                                    rank = "Intermediate";
                                    badgeClass = "bronze";
                                    icon = "fa-certificate";
                                } else if (user.totalUpvotes >= 50) {
                                    rank = "Beginner";
                                    badgeClass = "bronze";
                                    icon = "fa-seedling";
                                } else {
                                    rank = "Newbie";
                                    badgeClass = "bronze";
                                    icon = "fa-user";
                                }
                                %>
                                <div class="ranking" style="margin-top: 0.5rem;">
                                    <span class="ranking-badge <%= badgeClass %>" style="display: inline-flex; align-items: center; gap: 0.25rem; padding: 0.25rem 0.5rem; border-radius: 1rem; font-size: 0.75rem; background: var(--badge-bg); color: var(--badge-text);">
                                        <i class="fas <%= icon %>"></i>
                                        <%= rank %>
                                    </span>
                                </div>
                            </div>
                            <div class="dropdown-divider" style="height: 1px; background: var(--border);"></div>
                            <a href="#" id="change-username" class="dropdown-item" style="display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; color: var(--text); text-decoration: none; transition: background 0.2s;">
                                <i class="fas fa-user-edit"></i>
                                Change Username
                            </a>
                            <a href="/my-posts" class="dropdown-item" style="display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; color: var(--text); text-decoration: none; transition: background 0.2s;">
                                <i class="fas fa-chart-line"></i>
                                Reputation
                            </a>
                            <a href="fordevelopers.html" class="dropdown-item" style="display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; color: var(--text); text-decoration: none; transition: background 0.2s;">
                                <i class="fas fa-info-circle"></i>
                                About us
                            </a>
                            <a href="/github" class="dropdown-item" style="display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; color: var(--text); text-decoration: none; transition: background 0.2s;">
                                <i class="fas fa-newspaper"></i>
                                News
                            </a>
                            <div class="dropdown-divider" style="height: 1px; background: var(--border);"></div>
                            <div class="theme-toggle-container dropdown-item" style="display: flex; align-items: center; justify-content: space-between; padding: 0.75rem 1rem;">
                                <span style="color: var(--text);">Theme:</span>
                                <label class="theme-switch" title="Switch between light and dark theme">
                                    <input type="checkbox" id="theme-toggle">
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <a href="/logout" class="dropdown-item text-danger" style="display: flex; align-items: center; gap: 0.5rem; padding: 0.75rem 1rem; color: var(--danger); text-decoration: none; transition: background 0.2s;">
                                <i class="fas fa-sign-out-alt"></i>
                                Logout
                            </a>
                        </div>
                    </div>
                </div>
            <% } else { %>
                <div class="nav-links">
                    <a href="/login" style="color: var(--text); text-decoration: none; padding: 0.5rem 1rem; border-radius: 0.5rem; transition: background 0.2s;">Login</a>
                    <a href="/register" style="color: var(--text); text-decoration: none; padding: 0.5rem 1rem; border-radius: 0.5rem; transition: background 0.2s;">Register</a>
                    <a href="/github" class="github-btn" style="display: flex; align-items: center; gap: 0.5rem; color: var(--text); text-decoration: none; padding: 0.5rem 1rem; border-radius: 0.5rem; transition: background 0.2s;">
                        <i class="fas fa-newspaper"></i>
                        News
                    </a>
                    
                    <div style="display: flex; align-items: center; gap: 8px;">
                        <span style="font-size: 0.875rem; color: var(--text-muted);">Theme:</span>
                        <label class="theme-switch" title="Switch between light and dark theme">
                            <input type="checkbox" id="theme-toggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div style="position: absolute; top: 100%; left: 0; background: var(--bg-card); padding: 0.5rem 1rem; border-radius: 0.5rem; margin-top: 0.5rem; box-shadow: var(--shadow); font-size: 0.875rem; color: var(--text-muted); white-space: nowrap;">
                        Login/Register to access all features
                    </div>
                </div>
            <% } %>
        </div>
    </header>
    <script>
    function toggleDropdown(trigger) {
        const dropdownContent = trigger.nextElementSibling;
        if (dropdownContent.style.visibility === 'visible') {
            dropdownContent.style.opacity = '0';
            dropdownContent.style.visibility = 'hidden';
            dropdownContent.style.transform = 'translateY(-10px)';
        } else {
            dropdownContent.style.opacity = '1';
            dropdownContent.style.visibility = 'visible';
            dropdownContent.style.transform = 'translateY(0)';
        }
    }
    </script>
    </header>

    <div class="search-container">
        <div class="search-input-wrapper">
            <input type="text" id="search-bar" placeholder="Search posts by title, content, or category...">
            <div class="ai-toggle-wrapper">
                <label class="ai-toggle-label">
                    <i class="fas fa-robot"></i>
                    Devit.to AI
                </label>
                <label class="ai-toggle">
                    <input type="checkbox" id="ai-toggle">
                    <span class="ai-toggle-slider"></span>
                </label>
            </div>
        </div>

        <div id="ai-response" class="ai-response">
            <div class="ai-response-header">
                <i class="fas fa-robot"></i>
                <span class="ai-response-title">AI Response</span>
            </div>
            <div class="ai-response-content"></div>
        </div>

        <div id="ai-loading" class="ai-response-loading">
            <i class="fas fa-spinner"></i>
            <span>AI is thinking...</span>
        </div>
        <button class="toggle-sidebar" onclick="toggleSidebar()">
            <div class="toggle-lines">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </button>

        <div class="categories-sidebar">
            <h3 class="sidebar-title">
                <i class="fas fa-layer-group"></i>
                Categories
            </h3>
            <div class="categories-list">
                <% 
                // Initialize categories object with default values
                const categories = {
                    'all': 0, // Will be updated if posts exist
                    'General': 0,
                    'Javascript/Typescript': 0,
                    'C++': 0,
                    'Devit.to': 0,
                    'Python': 0,
                    'PHP': 0,
                    'Tech': 0,
                    'AI': 0,
                    'Java': 0,
                    'Ruby': 0,
                    'Go': 0,
                    'Rust': 0,
                    'Swift': 0,
                    'Kotlin': 0,
                    'React': 0,
                    'Vue': 0,
                    'Angular': 0,
                    'Node.js': 0,
                    'DevOps': 0,
                    'Cloud Computing': 0,
                    'Cybersecurity': 0,
                    'Blockchain': 0,
                    'Machine Learning': 0,
                    'Data Science': 0
                };

                // Update 'all' count if posts exists
                if (typeof locals.posts !== 'undefined' && Array.isArray(locals.posts)) {
                    categories.all = locals.posts.length;
                    
                    // Count posts per category
                    locals.posts.forEach(post => {
                        if (categories.hasOwnProperty(post.category)) {
                            categories[post.category]++;
                        }
                    });
                }

                // Sort categories by post count (descending)
                const sortedCategories = Object.entries(categories)
                    .sort((a, b) => b[1] - a[1]);

                // Define icon map here
                const iconMap = {
                    'General': 'fas fa-globe',
                    'Javascript/Typescript': 'fab fa-js',
                    'C++': 'fas fa-code',
                    'Devit.to': 'fas fa-gamepad',
                    'Python': 'fab fa-python',
                    'PHP': 'fab fa-php',
                    'Tech': 'fas fa-microchip',
                    'AI': 'fas fa-robot',
                    'Java': 'fab fa-java',
                    'Ruby': 'fas fa-gem',
                    'Go': 'fab fa-golang',
                    'Rust': 'fas fa-cog',
                    'Swift': 'fab fa-swift',
                    'Kotlin': 'fas fa-mobile-alt',
                    'React': 'fab fa-react',
                    'Vue': 'fab fa-vuejs',
                    'Angular': 'fab fa-angular',
                    'Node.js': 'fab fa-node-js',
                    'DevOps': 'fas fa-server',
                    'Cloud Computing': 'fas fa-cloud',
                    'Cybersecurity': 'fas fa-shield-alt',
                    'Blockchain': 'fas fa-link',
                    'Machine Learning': 'fas fa-brain',
                    'Data Science': 'fas fa-chart-bar'
                };
                %>

                <a href="javascript:void(0)" class="category-item active" data-value="" onclick="filterPosts('')">
                    <i class="fas fa-th-large"></i>
                    <span>All Categories</span>
                    <span class="post-count"><%= categories['all'] %></span>
                </a>

                <% sortedCategories.forEach(([category, count]) => { 
                    if(category !== 'all' && count > 0) { %>
                        <a href="javascript:void(0)" 
                           class="category-item" 
                           data-value="<%= category %>" 
                           onclick="filterPosts('<%= category %>')">
                            <i class="<%= iconMap[category] || 'fas fa-tag' %>"></i>
                            <span><%= category %></span>
                            <span class="post-count"><%= count %></span>
                        </a>
                    <% }
                }); %>
            </div>
        </div>

        <style>
            .toggle-sidebar {
                position: fixed;
                top: 45px;
                left: 15px;
                z-index: 1000;
                background: var(--primary);
                border: none;
                border-radius: 8px;
                width: 44px;
                height: 44px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            }

            .toggle-sidebar:hover {
                transform: scale(1.05);
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            }

            .toggle-lines {
                display: flex;
                flex-direction: column;
                gap: 5px;
                width: 24px;
            }

            .toggle-lines span {
                display: block;
                width: 100%;
                height: 2.5px;
                background: white;
                border-radius: 2px;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                transform-origin: center;
            }

            .toggle-sidebar.active .toggle-lines span:nth-child(1) {
                transform: translateY(7.5px) rotate(45deg);
            }

            .toggle-sidebar.active .toggle-lines span:nth-child(2) {
                opacity: 0;
                transform: scale(0);
            }

            .toggle-sidebar.active .toggle-lines span:nth-child(3) {
                transform: translateY(-7.5px) rotate(-45deg);
            }

            .categories-sidebar {
                position: fixed;
                left: 0;
                top: 60px;
                bottom: 0;
                width: 300px;
                background: var(--bg-card);
                border-right: 1px solid var(--border);
                padding: 2rem;
                overflow-y: auto;
                box-shadow: var(--shadow-lg);
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                z-index: 100;
                transform: translateX(-100%);
            }

            .categories-sidebar.active {
                transform: translateX(0);
            }

            @media (max-width: 768px) {
                .categories-sidebar {
                    width: 100%;
                    backdrop-filter: blur(8px);
                }
            }

            .sidebar-title {
                color: var(--text);
                font-size: 1.25rem;
                font-weight: 700;
                margin-bottom: 2rem;
                padding-bottom: 1rem;
                border-bottom: 2px solid var(--border);
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .sidebar-title i {
                color: var(--primary);
                font-size: 1.5rem;
            }

            .categories-list {
                display: flex;
                flex-direction: column;
                gap: 1rem;
            }

            .category-item {
                display: flex;
                align-items: center;
                padding: 1rem 1.25rem;
                color: var(--text);
                text-decoration: none;
                border-radius: 1rem;
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                font-size: 1rem;
                font-weight: 500;
                background: var(--bg);
                border: 1.5px solid var(--border);
                position: relative;
                overflow: hidden;
                backdrop-filter: blur(4px);
            }

            .category-item::before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                height: 100%;
                width: 4px;
                background: var(--primary);
                opacity: 0;
                transition: opacity 0.3s;
            }

            .category-item i {
                width: 28px;
                text-align: center;
                font-size: 1.2rem;
                color: var(--primary);
                margin-right: 1rem;
                transition: transform 0.3s;
            }

            .category-item span {
                flex: 1;
            }

            .category-item .post-count {
                background: var(--primary);
                color: white;
                padding: 0.35rem 0.75rem;
                border-radius: 2rem;
                font-size: 0.85rem;
                min-width: 28px;
                text-align: center;
                transition: all 0.3s;
                font-weight: 600;
            }

            .category-item:hover {
                background: var(--primary-light);
                border-color: var(--primary);
                transform: translateY(-2px);
            }

            .category-item:hover::before {
                opacity: 1;
            }

            .category-item:hover i {
                transform: scale(1.15) rotate(5deg);
            }

            .category-item:hover .post-count {
                transform: scale(1.1);
                box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            }

            .category-item.active {
                background: var(--primary);
                color: white;
                border-color: var(--primary);
                box-shadow: 0 4px 12px rgba(var(--primary-rgb), 0.2);
            }

            .category-item.active i {
                color: white;
            }

            .category-item.active .post-count {
                background: white;
                color: var(--primary);
            }

            .categories-sidebar::-webkit-scrollbar {
                width: 8px;
            }

            .categories-sidebar::-webkit-scrollbar-track {
                background: var(--bg);
                border-radius: 4px;
            }

            .categories-sidebar::-webkit-scrollbar-thumb {
                background: var(--primary);
                border-radius: 4px;
                border: 2px solid var(--bg);
            }

            .categories-sidebar::-webkit-scrollbar-thumb:hover {
                background: var(--primary-hover);
            }

            @keyframes fadeIn {
                from { 
                    opacity: 0; 
                    transform: translateY(20px); 
                }
                to { 
                    opacity: 1; 
                    transform: translateY(0); 
                }
            }

            .category-item {
                animation: fadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
                animation-delay: calc(var(--index) * 0.08s);
                opacity: 0;
            }
        </style>

        <script>
            // Add animation delay to categories
            document.querySelectorAll('.category-item').forEach((item, index) => {
                item.style.setProperty('--index', index);
            });

            // Toggle sidebar functionality
            function toggleSidebar() {
                const sidebar = document.querySelector('.categories-sidebar');
                const toggleBtn = document.querySelector('.toggle-sidebar');
                sidebar.classList.toggle('active');
                toggleBtn.classList.toggle('active');
            }
        </script>
    <script>
        const searchBar = document.getElementById('search-bar');
        const aiToggle = document.getElementById('ai-toggle');
        const aiLoading = document.getElementById('ai-loading');
        const aiResponse = document.getElementById('ai-response');
        const aiResponseContent = aiResponse.querySelector('.ai-response-content');

        let debounceTimeout;

        searchBar.addEventListener('input', () => {
            // Clear any existing timeout
            clearTimeout(debounceTimeout);

            if (!aiToggle.checked) return;
            
            const query = searchBar.value.trim();
            if (!query) {
                aiResponse.style.display = 'none';
                aiLoading.style.display = 'none';
                return;
            }

            // Set loading state
            aiLoading.style.display = 'flex';
            aiResponse.style.display = 'none';

            // Debounce the API call by 500ms
            debounceTimeout = setTimeout(async () => {
                try {
                    const prompt = `Given this search query: "${query}", provide a helpful response that could include:
                    - Relevant technical explanations
                    - Code examples if applicable
                    - Best practices
                    - Common pitfalls to avoid
                    Please keep the response concise and focused.`;

                    const response = await fetch('https://api-inference.huggingface.co/models/Qwen/Qwen2.5-Coder-32B-Instruct', {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer 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',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            inputs: prompt,
                            parameters: {
                                max_length: 500,
                                temperature: 0.7,
                                top_p: 0.95,
                                top_k: 50,
                                repetition_penalty: 1.2,
                                return_full_text: false,
                                max_new_tokens: 250,
                                do_sample: true
                            }
                        })
                    });

                    if (!response.ok) {
                        throw new Error('API request failed');
                    }

                    const result = await response.json();
                    
                    // Format the response text with line breaks and proper spacing
                    const formattedText = result[0].generated_text
                        .trim()
                        .replace(/\n/g, '<br>')
                        .replace(/```([^`]+)```/g, '<pre><code>$1</code></pre>');
                    
                    aiResponseContent.innerHTML = formattedText;
                    
                    aiLoading.style.display = 'none';
                    aiResponse.style.display = 'block';

                } catch (error) {
                    console.error('Error:', error);
                    aiResponseContent.innerHTML = `
                        <div style="color: #ff4444; padding: 1rem;">
                            Sorry, there was an error processing your request. Please try again later.
                            <br><small>${error.message}</small>
                        </div>
                    `;
                    
                    aiLoading.style.display = 'none';
                    aiResponse.style.display = 'block';
                }
            }, 500);
        });

        aiToggle.addEventListener('change', () => {
            if (!aiToggle.checked) {
                aiResponse.style.display = 'none';
                aiLoading.style.display = 'none';
            } else if (searchBar.value.trim()) {
                // Trigger search if there's already text in the search bar
                searchBar.dispatchEvent(new Event('input'));
            }
        });
    </script>

    <main class="feed">
        <% posts.forEach(post => { %>
            <article class="post" id="post-<%= post._id %>">
                <div class="post-content-wrapper">
                    <div class="post-votes">
                        <button class="vote-btn upvote <%= post.upvotedBy?.includes(user?._id) ? 'active' : '' %>" data-id="<%= post._id %>">⬆️</button>
                        <span class="vote-count upvote-count"><%= post.upvotes %></span>
                        <span class="vote-count downvote-count"><%= post.downvotes %></span>
                        <button class="vote-btn downvote <%= post.downvotedBy?.includes(user?._id) ? 'active' : '' %>" data-id="<%= post._id %>">⬇️</button>
                    </div>
                    <div class="post-main">
                        <div class="post-header">
                            <div class="post-meta">
                                Posted in <%= post.category %> by 
                                <span class="user-info">
                                    <%= post.username %> (<%= post.author ? post.author.totalUpvotes : 0 %> total upvotes)
                                    <% if (user && user.username !== post.username) { %>
                                        <button class="follow-btn <%= user.following?.includes(post.username) ? 'following' : '' %>" 
                                                data-username="<%= post.username %>">
                                            <%= user.following?.includes(post.username) ? 'Following' : 'Follow' %>
                                        </button>
                                    <% } %>
                                </span>
                                • <%= new Date(post.createdAt).toLocaleDateString() %>
                            </div>
                            <h3 class="post-title"><%= post.title %></h3>
                            <div class="post-content">
                                <%= post.content %>
                            </div>
                        </div>
                        <div class="post-actions">
                            <button class="comments-toggle">💬 <%= post.comments.length %> Comments</button>
                            <% if (user && user.username === post.username) { %>
                                <button class="delete-btn" data-id="<%= post._id %>" onclick="deletePost('<%= post._id %>')">🗑️ Delete</button>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div class="comments-section">
                    <% if (user) { %>
                        <form class="comment-form" data-id="<%= post._id %>">
                            <input type="text" name="content" placeholder="Add a comment..." required>
                            <input type="hidden" name="username" value="<%= user.username %>">
                            <input type="hidden" name="authorId" value="<%= user._id %>">
                            <button type="submit" class="btn">Comment</button>
                        </form>
                    <% } %>
                    <div class="comments" id="comments-<%= post._id %>">
                        <% post.comments.forEach(comment => { %>
                            <div class="comment" id="comment-<%= comment._id %>">
                                <div class="comment-header">
                                    <span class="comment-username">
                                        <%= comment.username %>
                                    </span>
                                </div>
                                <div class="comment-content">
                                    <%= comment.content %>
                                </div>
                                <div class="comment-actions">
                                    <button class="comment-like-btn <%= comment.likedBy?.includes(user?._id) ? 'liked' : '' %>"
                                            data-comment-id="<%= comment._id %>"
                                            data-post-id="<%= post._id %>"
                                            onclick="likeComment(this, '<%= comment._id %>', '<%= post._id %>')"
                                            <%= !user ? 'disabled' : '' %>>
                                        ♥ <span class="like-count"><%= comment.likes || 0 %></span>
                                    </button>
                                    <% if (user && user.username === comment.username) { %>
                                        <button class="delete-comment-btn" data-post-id="<%= post._id %>" data-comment-id="<%= comment._id %>">Delete</button>
                                    <% } %>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>
            </article>
        <% }) %>
    </main>

    <% if (user) { %>
        <button class="new-post-btn" id="new-post-btn">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            New Post
        </button>
        
        <div class="post-modal" id="post-modal">
            <form class="post-form" id="new-post-form">
                <input type="text" name="title" placeholder="Post title" required>
                <select name="category" required>
                    <option value="General">General</option>
                    <option value="Javascript/Typescript">Javascript/Typescript</option>
                    <option value="C++">C++</option>
                    <option value="Devit.to">Devit.to</option>
                    <option value="Python">Python</option>
                    <option value="PHP">PHP</option>
                    <option value="Tech">Tech</option>
                    <option value="AI">AI</option>
                    <option value="Java">Java</option>
                    <option value="Ruby">Ruby</option>
                    <option value="Go">Go</option>
                    <option value="Rust">Rust</option>
                    <option value="Swift">Swift</option>
                    <option value="Kotlin">Kotlin</option>
                    <option value="React">React</option>
                    <option value="Vue">Vue</option>
                    <option value="Angular">Angular</option>
                    <option value="Node.js">Node.js</option>
                    <option value="DevOps">DevOps</option>
                    <option value="Cloud Computing">Cloud Computing</option>
                    <option value="Cybersecurity">Cybersecurity</option>
                    <option value="Blockchain">Blockchain</option>
                    <option value="Machine Learning">Machine Learning</option>
                    <option value="Data Science">Data Science</option>
                </select>
                <textarea name="content" placeholder="Describe your post..." required></textarea>
                <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                    <button type="button" class="btn" id="cancel-post" style="background: var(--bg); color: var(--text-muted); border: 1px solid var(--border); padding: 0.5rem 1rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s;">Cancel</button>
                    <button type="submit" class="btn">Post</button>
                </div>
            </form>
        </div>
    <% } %>
    <div id="ios-prompt" class="ios-prompt" style="display: none; position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background: var(--bg-card); padding: 1rem; border-radius: 1rem; box-shadow: var(--shadow-lg); width: 90%; max-width: 400px; z-index: 999;">
        <div style="display: flex; align-items: center; gap: 1rem;">
            <div style="flex-shrink: 0;">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 15V3M12 15L8 11M12 15L16 11M3 15V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
            <div>
                <p style="margin: 0; color: var(--text); font-weight: 500;">Add to Home Screen</p>
                <p style="margin: 0; font-size: 0.875rem; color: var(--text-muted);">Install Devit.to for the best experience</p>
            </div>
            <button id="close-ios-prompt" style="margin-left: auto; background: none; border: none; padding: 0.5rem; cursor: pointer; color: var(--text-muted);">✕</button>
        </div>
    </div>

    <script>
        // Check if the device is iOS and the app is not already installed
        let isIos = () => {
            return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        }

        let isInStandaloneMode = () => {
            return ('standalone' in window.navigator) && (window.navigator.standalone);
        }

        // Show prompt only on iOS devices when not in standalone mode
        if (isIos() && !isInStandaloneMode()) {
            // Show the prompt after a delay
            setTimeout(() => {
                document.getElementById('ios-prompt').style.display = 'block';
            }, 2000);

            // Handle close button
            document.getElementById('close-ios-prompt').addEventListener('click', () => {
                document.getElementById('ios-prompt').style.display = 'none';
                // Store in localStorage that user has dismissed the prompt
                localStorage.setItem('ios-prompt-dismissed', 'true');
            });
        }
    </script>

    <footer class="footer">
        <p>&copy; 2025 DEVIT.TO. All rights reserved.</p>
        <p>Licensed under @devharris</p>
    </footer>

    <script>
        $(document).ready(function() {
            // Theme switching functionality
            const themeToggle = $('#theme-toggle');
            const currentTheme = localStorage.getItem('theme') || 'light';
            
            document.documentElement.setAttribute('data-theme', currentTheme);
            themeToggle.prop('checked', currentTheme === 'dark');

            themeToggle.on('change', function() {
                const newTheme = this.checked ? 'dark' : 'light';
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
            });

            // Follow button functionality
            $(document).on('click', '.follow-btn', function() {
                if (!currentUser) {
                    alert('Please login to follow users');
                    return;
                }

                const btn = $(this);
                const username = btn.data('username');

                $.ajax({
                    url: '/api/follow',
                    method: 'POST',
                    data: JSON.stringify({ username }),
                    contentType: 'application/json',
                    success: function(response) {
                        if (response.success) {
                            // Update all instances of this user's follow button
                            $(`.follow-btn[data-username="${username}"]`).each(function() {
                                const followBtn = $(this);
                                if (response.isFollowing) {
                                    followBtn.addClass('following').text('Following');
                                } else {
                                    followBtn.removeClass('following').text('Follow');
                                }
                            });

                            // Update all instances of this user's followers count
                            const newCount = response.followersCount;
                            $(`.user-info:contains("${username}") .followers-count`).text(`(${newCount} followers)`);
                            $(`.comment-username:contains("${username}") .followers-count`).text(`(${newCount} followers)`);
                        }
                    },
                    error: function(err) {
                        alert('Error updating follow status');
                    }
                });
            });

            // All JavaScript functionality remains the same
            const postModal = $('#post-modal');
            const newPostBtn = $('#new-post-btn');
            const cancelPostBtn = $('#cancel-post');
            const currentUser = '<%= user ? user.username : "" %>';

            // Username change functionality
            $('#change-username').on('click', function(e) {
                e.preventDefault();
                
                // Create and show modal
                const modal = $(`
                    <div class="username-modal" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); backdrop-filter: blur(4px); justify-content: center; align-items: center; z-index: 1000;">
                        <div class="username-form" style="background: var(--bg-card); padding: 2rem; border-radius: 1rem; width: 90%; max-width: 400px; box-shadow: var(--shadow-lg);">
                            <h3 style="margin-bottom: 1rem; color: var(--text);">Change Username</h3>
                            <input type="text" id="new-username-input" placeholder="Enter new username" style="width: 100%; padding: 0.75rem 1rem; margin-bottom: 1rem; border-radius: 0.5rem; border: 1px solid var(--border); background: var(--bg); color: var(--text);">
                            <div style="display: flex; gap: 0.75rem; justify-content: flex-end;">
                                <button class="cancel-username-btn btn" style="background: var(--bg); color: var(--text-muted); border: 1px solid var(--border); padding: 0.5rem 1rem; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s;">Cancel</button>
                                <button class="submit-username-btn btn">Update Username</button>
                            </div>
                        </div>
                    </div>
                `).appendTo('body');

                // Handle cancel
                modal.find('.cancel-username-btn').on('click', function() {
                    modal.remove();
                });

                // Handle submit
                modal.find('.submit-username-btn').on('click', function() {
                    const newUsername = modal.find('#new-username-input').val();
                    if (newUsername) {
                        $.ajax({
                            url: '/change-username',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({ newUsername }),
                            success: function(response) {
                                if (response.success) {
                                    const alert = $(`
                                        <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                                                    background: var(--bg-card); padding: 2rem; border-radius: 1rem;
                                                    box-shadow: var(--shadow-lg); z-index: 2000;
                                                    text-align: center; min-width: 300px;">
                                            <h4 style="margin-bottom: 1rem; color: var(--text);">Username Updated!</h4>
                                            <p style="margin-bottom: 1rem; color: var(--text-muted);">Refreshing page to see changes...</p>
                                            <div class="loading-dots">
                                                <span style="animation: pulse 1s infinite">.</span>
                                                <span style="animation: pulse 1s infinite .2s">.</span>
                                                <span style="animation: pulse 1s infinite .4s">.</span>
                                            </div>
                                        </div>
                                    `).appendTo('body');

                                    modal.remove();
                                    setTimeout(() => {
                                        alert.remove();
                                        location.reload();
                                    }, 2000);
                                } else {
                                    alert(response.message || 'Username already taken');
                                }
                            },
                            error: function() {
                                alert('Error updating username');
                            }
                        });
                    }
                });
            });

            newPostBtn.on('click', function() {
                postModal.css('display', 'flex');
            });

            cancelPostBtn.on('click', function() {
                postModal.hide();
                $('#new-post-form')[0].reset();
            });

            $(window).on('click', function(e) {
                if (e.target === postModal[0]) {
                    postModal.hide();
                    $('#new-post-form')[0].reset();
                }
            });

            // Comment like functionality
            $(document).on('click', '.comment-like-btn', function() {
                if (!currentUser) {
                    alert('Please login to like comments');
                    return;
                }
                
                const btn = $(this);
                const commentId = btn.data('comment-id');
                const postId = btn.data('post-id');
                
                $.ajax({
                    url: `/api/posts/${postId}/comments/${commentId}/like`,
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    success: function(response) {
                        if (response.success) {
                            const likeCount = btn.find('.like-count');
                            likeCount.text(response.likes);
                            if (response.isLiked) {
                                btn.addClass('liked');
                            } else {
                                btn.removeClass('liked');
                            }
                        }
                    },
                    error: function(err) {
                        if (err.status === 401) {
                            alert('Please login to like comments');
                        } else {
                            alert('Unable to like comment. Please try again later.');
                        }
                    }
                });
            });

            // Delete comment functionality
            $(document).on('click', '.delete-comment-btn', function() {
                const postId = $(this).data('post-id');
                const commentId = $(this).data('comment-id');
                
                if (confirm('Are you sure you want to delete this comment?')) {
                    $.ajax({
                        url: `/post/${postId}/comment/${commentId}`,
                        method: 'DELETE',
                        success: function(response) {
                            $(`#comment-${commentId}`).fadeOut(400, function() {
                                $(this).remove();
                            });
                        },
                        error: function(err) {
                            alert('Unable to delete comment. Please try again later.');
                        }
                    });
                }
            });

            // New post submission
            $('#new-post-form').on('submit', function(e) {
                e.preventDefault();
                $.ajax({
                    url: '/post',
                    method: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        location.reload();
                    },
                    error: function(err) {
                        alert('Error posting review');
                    }
                });
            });

            // Delete post
            $('.delete-btn').on('click', function(e) {
                e.preventDefault(); // Prevent any default behavior
                
                if (confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
                    const postId = $(this).data('id');
                    const postElement = $(`#post-${postId}`);
                    
                    // First check if post exists
                    if (!postElement.length) {
                        const errorMessage = $('<div class="alert alert-error">Post not found. The page will refresh.</div>')
                            .hide()
                            .insertBefore('.feed')
                            .fadeIn(400);
                            
                        setTimeout(() => {
                            location.reload();
                        }, 2000);
                        return;
                    }
                    
                    $.ajax({
                        url: `/post/${postId}`,
                        method: 'DELETE',
                        success: function(response) {
                            // Fade out and remove the post
                            postElement.fadeOut(400, function() {
                                $(this).remove();
                                
                                // Show success message
                                const successMessage = $('<div class="alert alert-success">Post deleted successfully</div>')
                                    .hide()
                                    .insertBefore('.feed')
                                    .fadeIn(400);
                                    
                                // Remove success message after 3 seconds
                                setTimeout(() => {
                                    successMessage.fadeOut(400, function() {
                                        $(this).remove();
                                    });
                                }, 3000);
                            });
                        },
                        error: function(xhr) {
                            let errorMsg = 'Failed to delete post. ';
                            
                            switch(xhr.status) {
                                case 401:
                                    errorMsg += 'Please login to delete posts.';
                                    break;
                                case 403:
                                    errorMsg += 'You do not have permission to delete this post.';
                                    break;
                                case 404:
                                    errorMsg += 'Post not found.';
                                    location.reload(); // Immediately refresh if post not found
                                    break;
                                default:
                                    errorMsg += 'An unexpected error occurred. Please try again later.';
                            }
                            
                            // Show error message
                            const errorMessage = $('<div class="alert alert-error">' + errorMsg + '</div>')
                                .hide()
                                .insertBefore('.feed')
                                .fadeIn(400);
                                
                            setTimeout(() => {
                                errorMessage.fadeOut(400, function() {
                                    $(this).remove();
                                });
                            }, 3000);
                        }
                    });
                }
            });

            // Updated voting system with separate counts
            $('.vote-btn').on('click', function() {
                if (!currentUser) {
                    alert('Please login to vote');
                    return;
                }

                const btn = $(this);
                const postId = btn.data('id');
                const isUpvote = btn.hasClass('upvote');
                const voteType = isUpvote ? 'upvote' : 'downvote';
                const postContainer = btn.closest('.post');
                const upvoteCount = postContainer.find('.upvote-count');
                const downvoteCount = postContainer.find('.downvote-count');

                $.ajax({
                    url: `/post/${postId}/${voteType}`,
                    method: 'POST',
                    success: function(response) {
                        // Update vote counts with animation
                        upvoteCount.text(response.upvotes);
                        downvoteCount.text(response.downvotes);
                        
                        // Trigger animation by removing and re-adding class
                        if (isUpvote) {
                            upvoteCount.removeClass('upvote-count').addClass('upvote-count');
                        } else {
                            downvoteCount.removeClass('downvote-count').addClass('downvote-count');
                        }
                        
                        // Update button states
                        const upvoteBtn = postContainer.find('.upvote');
                        const downvoteBtn = postContainer.find('.downvote');
                        
                        upvoteBtn.removeClass('active');
                        downvoteBtn.removeClass('active');
                        
                        if (response.userVote === 'upvote') {
                            upvoteBtn.addClass('active');
                        } else if (response.userVote === 'downvote') {
                            downvoteBtn.addClass('active');
                        }
                    },
                    error: function() {
                        alert('Please login to vote');
                    }
                });
            });

            // Comment submission
            $('.comment-form').on('submit', function(e) {
                e.preventDefault();
                const postId = $(this).data('id');
                const form = $(this);
                const content = form.find('input[name="content"]').val();
                const username = form.find('input[name="username"]').val();

                $.ajax({
                    url: `/post/${postId}/comment`,
                    method: 'POST',
                    data: {
                        content: content,
                        username: username
                    },
                    success: function(response) {
                        const commentHtml = `
                            <div class="comment" id="comment-${response.commentId}">
                                <div class="comment-header">
                                    <span class="comment-username">${username}</span>
                                </div>
                                <div class="comment-content">
                                    ${content}
                                </div>
                                <div class="comment-actions">
                                    <button class="comment-like-btn" data-comment-id="${response.commentId}" data-post-id="${postId}">
                                        ♥ <span class="like-count">0</span>
                                    </button>
                                    <button class="delete-comment-btn" data-post-id="${postId}" data-comment-id="${response.commentId}">Delete</button>
                                </div>
                            </div>
                        `;
                        $(`#comments-${postId}`).append(commentHtml);
                        form[0].reset();
                    },
                    error: function() {
                        alert('Error posting comment');
                    }
                });
            });

            // Search functionality with debouncing
            let searchTimeout;
            $('#search-bar, #search-category').on('input change', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    const query = $('#search-bar').val().toLowerCase();
                    const category = $('#search-category').val();
                    
                    $('.post').each(function() {
                        const post = $(this);
                        const title = post.find('.post-title').text().toLowerCase();
                        const content = post.find('.post-content').text().toLowerCase();
                        const postCategory = post.find('.post-meta').text().split('|')[0].trim();
                        
                        const matchesQuery = !query || title.includes(query) || content.includes(query);
                        const matchesCategory = !category || postCategory === category;
                        
                        if (matchesQuery && matchesCategory) {
                            post.show();
                        } else {
                            post.hide();
                        }
                    });
                    
                    // Show message if no results found
                    const visiblePosts = $('.post:visible').length;
                    if (visiblePosts === 0) {
                        if ($('.no-results').length === 0) {
                            $('.feed').append('<p class="no-results">No posts found matching your search criteria.</p>');
                        }
                    } else {
                        $('.no-results').remove();
                    }
                }, 300);
            });
        });
    </script>
</body>
</html>
